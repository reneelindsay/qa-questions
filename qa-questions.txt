
1. HOW DO YOU KNOW WHEN YOU'VE TESTED ENOUGH?

It’s not always possible to “test all the things” in every conceivable way, particularly when 
working within deadlines. Constructing a realistic-yet-thorough end point in testing is known 
as “exit criteria” and requires careful consideration. 

Determining which issues have the highest priority and severity allow for the most important 
tests to be run andcorresponding issues resolved. It requires a deep understanding of user 
expectations and efficient ways to write and execute tests. 

Documenting all changes to the user story, executing all test cases, and ensuring that 95% of 
tests pass are examples of good exit criteria. 

Critical failures need to be addressed and remedied, and the user must be able to interact with 
the product in accordance with their expectations.



2. IS QUALITY ASSURANCE THE SAME AS QUALITY CONTROL?

No. Quality Assurance is process-oriented. It ensures that the designing, implementation, and 
maintaining of efficient testing procedures occur between testing teams and developers. 

Quality Control is product-oriented. It concerns the actual tests themselves, and resolves issues 
that tests uncover with the user story and user expectations in mind. 



3. WHAT'S THE DIFFERENCE BETWEEN "SEVERITY" AND "PRIORITY"?

“Severity” is how serious an issue is. A web page that crashes when clicking on a button is an 
example of a high-severity issue. “Priority” indicates how quickly an issue needs to be addressed. 

However, high severity does not always mean high priority. For example, say the button that causes 
a web page to crash does so on a legacy page that gets almost no traffic. The severity is high, but 
since the page is rarely visited by users, its priority is low.

Conversely, high priority issues can have low severity. The wrong image for a product, for example, 
is an issue that needs to be addressed quickly, even if the web page is running smoothly. Typos 
fall into the high-priority, low-severity category as well. 



4. WHAT'S THE DIFFERENCE BETWEEN "VERIFICATION" AND "VALIDATION"?

“Verification” addresses the need to build a system that has everything required to satisfy 
requirements and is working properly. Verification is concerned with identifying and resolving 
defects in the specification documentation.

“Validation” sounds similar and is often (mistakenly) used interchangeably with “verification.” 
However, validation is concerned with building the proper system, not building the system properly. 
In other words, validation addresses the needs and expectations of the user. A system could be 
verified—that is, working properly—and still fall short of user expectations. In this case, the 
system is not validated and needs to be adjusted with the user story in mind. 

Where verification finds and resolves defects in specification documentation, validation 
finds and resolves defects in software implementation.



5. AUTOMATION SEEMS LIKE THE FUTURE OF TESTING. WHEN IS MANUAL TESTING ACTUALLY BETTER?

Automation is a powerful testing approach, but there are situations when it is a waste of 
resources. For example, when validation is subjective (that is, dependent on a person judging 
the look and feel, usability, UX/UI, etc.), automated tests are undesirable. 

Additionally, when deeper insight into a system is required, or when test cases are extremely 
complex and automated tests are wasteful.



6. WHAT IS A TEST PLAN AND WHY IS IT IMPORTANT?

A test plan is a document outlining the test planning process. It accounts for the resources 
available for testing, a timeline for test activities, the testing approach, and the scope of 
the tests intended for the project. 

Additionally, a test plan explains why each decision is made during the testing process, including 
which entry and exit criteria to adhere to, which features to test, the tasks involved in testing 
and who among the team will execute them, the design techniques testers are using, the testing 
environment, risks and accompanying contingencies, and how independently or cooperatively each 
tester will be working throughout the testing process. 

In several ways, a test plan is similar to an executive summary or a proposal for a business venture. 
Cost-benefit analyses, timelines, methodology, resources, and decision-making process. As with proposals, 
test plans may be updated to reflect changes during the process, such as the user story. 

